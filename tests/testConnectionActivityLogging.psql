--testAddConnectionActivityLogging.psql - ClassDB

--Andrew Figueroa, Steven Rollo, Sean Murthy
--Data Science & Systems Lab (DASSL)
--https://dassl.github.io

--(C) 2017- DASSL. ALL RIGHTS RESERVED.
--Licensed to others under CC 4.0 BY-SA-NC
--https://creativecommons.org/licenses/by-nc-sa/4.0/

--PROVIDED AS IS. NO WARRANTIES EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.


--The following test script should be run as a superuser, otherwise tests will fail

--This script uses psql's \c command to change connections. You will have to
-- input the password for each role manually during the switch
--The password for each user is their username.

--The following tests are performed. An error code of ERROR X indicates that test x
-- failed
--1) Test that connections from all ClassDB user types are recorded, and connections
-- from non-ClassDB users are not

\set ON_ERROR_STOP on

--Stores the original executing user from psql's :USER environment variable
\set POSTGRES_USER :USER

SET SESSION client_min_messages TO WARNING;

--Tests for superuser privilege on current_user
DO
$$
BEGIN
   IF NOT classdb.isSuperUser() THEN
      RAISE EXCEPTION 'Insufficient privileges: script must be run as a superuser';
   END IF;
END
$$;


DO
$$
BEGIN
   --Remove test users, if they still exist
   --Need to gaurd these because they fail if the users do not exist
   IF(EXISTS (SELECT TRUE FROM ClassDB.USER WHERE userName = 'constu01')) THEN
      PERFORM ClassDB.dropStudent('constu01', TRUE, TRUE, 'drop_c');
   END IF;
   IF(EXISTS (SELECT TRUE FROM ClassDB.USER WHERE userName = 'constu02')) THEN
      PERFORM ClassDB.dropStudent('constu02', TRUE, TRUE, 'drop_c');
   END IF;
   IF(EXISTS (SELECT TRUE FROM ClassDB.USER WHERE userName = 'condbm01')) THEN
      PERFORM ClassDB.dropDBManager('condbm01', TRUE, TRUE, 'drop_c');
   END IF;
   IF(EXISTS (SELECT TRUE FROM ClassDB.USER WHERE userName = 'conins01')) THEN
      PERFORM ClassDB.dropInstructor('conins01', TRUE, TRUE, 'drop_c');
   END IF;

   --Need to check if users exists to use DROP OWNED BY
   IF(EXISTS (SELECT TRUE FROM pg_catalog.pg_roles WHERE rolname = 'unown01')) THEN
      DROP OWNED BY unown01; --Drops connect permissions granted to unown01
      DROP USER unown01;
   END IF;

   --Create ClassDB users to test connection log importing
   PERFORM ClassDB.createStudent('constu01', 'con test student 01');
   PERFORM ClassDB.createStudent('constu02', 'con test student 02');
   PERFORM ClassDB.createDBManager('condbm01', 'con test db manager 01');
   PERFORM ClassDB.createInstructor('conins01', 'con test instructor 01');

   --Create a non-ClassDB user to ensure their connections are not imported
   CREATE USER unown01 ENCRYPTED PASSWORD 'unown01';
   EXECUTE FORMAT('GRANT CONNECT ON DATABASE %I TO unown01', CURRENT_DATABASE());

   --Fill up the log with any existing connections
   PERFORM ClassDB.importConnectionLog();

   RAISE NOTICE 'Creating new connections to the server. Please enter the username '
                'when prompted for a test user''s password. You will be prompted to login '
                'to your original account at the end of the test.';
END;
$$;


--Switch to different users to create connection activity
-- the '-' tells psql to connect to the current database with the supplied
-- user name
\c  - constu01

\c - constu02

\c - condbm01

\c - unown01

\c - conins01

--Test importing logs as an instructor
BEGIN TRANSACTION;

DO
$$
BEGIN
   --Check if the correct number of connections were logged
   -- Only check current date, since all new connections should be from the current
   -- log file
   IF (SELECT numEntries
       FROM ClassDB.importConnectionLog(CURRENT_DATE)) <> 4 THEN

      RAISE INFO 'FAIL: Code 1';
   ELSE
      RAISE INFO 'PASS: ClassDB.importConnectionLog()';
   END IF;
END;
$$;

ROLLBACK;


--Prompt to relogin to the original executing user
\c - :POSTGRES_USER

DO
$$
BEGIN
   --Drop users & related objects
   PERFORM ClassDB.dropStudent('constu01', true, true, 'drop_c');
   PERFORM ClassDB.dropStudent('constu02', true, true, 'drop_c');
   PERFORM ClassDB.dropDBManager('condbm01', true, true, 'drop_c');
   PERFORM ClassDB.dropInstructor('conins01', true, true, 'drop_c');

   DROP OWNED BY unown01;
   DROP USER unown01;
END;
$$;
